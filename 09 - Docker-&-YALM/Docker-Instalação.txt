## Instalação Docker

## Certifique-se de que não existe nenhuma versão antiga instalada removendo-a

sudo apt-get remove docker docker-engine docker.io containerd runc

## Atualize o repositório

sudo apt-get update

## Instale pacotes necessários

sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y

## Adicione a chave oficial do Docker

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

## Verifique se a chave foi adicionada

sudo apt-key fingerprint 0EBFCD88

## Adicione o repositório do Docker

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

## Instale o Docker

sudo apt-get install docker-ce docker-ce-cli containerd.io -y

## Verifique se o Docker foi corretamente instalado executando no terminal

docker version

## Vamos criar e adicionar um usuário ao grupo do docker
	
## Criando um usuário

sudo addgroup docker

sudo adduser --ingroup docker us_docker

su us_docker

newgrp docker

OBS: Por quê fizemos isso?

Fizemos isso porque caso contrário só poderíamos executar o docker como superusuário, sudo ou root.

Não queremos isso. Queremos que nosso usuário comum possa executar o Docker. 

Por isso adicionamos nosso usuário ao grupo docker.

Quando o docker é executado, ele procura por um grupo com seu nome no sistema e dá permissão de uso aos
usuários que fazem parte deste grupo.

OBS: O quarto comando é 'uma gambiarra' que adiciona o nosso usuário a um grupo 'virtual' que demos
o nome de docker para evitar que tenhamos que reiniciar o computador.


## Testar a instalação executando o Hello World no terminal

docker run hello-world

## Informações

# A linguagem Yaml faz parte do core do Docker

## Imagens Docker
# Quando falamos de containers, imagens são "Templates" ou "Modelos" 
# no qual usamos para criar containers

# Quando é pedido para criar um container a partir de uma imagem
# O mesmo busca de forma local essa imagem, caso não se encontre
# o mesmo é buscado em "https://hub.docker.com"
# apos realizado a busca e o download, a mesma é armazenada de forma
# local, não sendo necessário a sua busca e o download posteriormente

# No site mencionado acima, possui diversas imagens de containers disponiveis
# para download. É possivel também realizar a publicação de imagens por parte do
# desenvolvedor

# As imagens são criadas a partir de um arquivo dockerfile.

## Sistema de Arquivos em Camadas ( filesystem )

# O sistema de arquivos do dockers é chamado de "Layered" 
# (Sistemas de arquivos em camadas)

# Sistema de arquivos comuns (Linux / Unix) Possui basicamente duas camadas:

#	bootfs: Onde fica o sistema de boot do sistema operacional e o Kernel

#	rootfs: Sistema de arquivos do sistema operacional (SO), incluindo arquitetura de
#			diretórios como /dev, /proc, /bin, /etc, /lib, /usr e /tmp
#			assim como os arquivos de configuração e binários do SO.
#			Sempre que iniciado o SO, essa camada em modo de leitura, e verificado
#			sua integridade, e em seguida o mesmo é montado e disponibilizado em 
# 			modo de leitura e escrita, disponibilizando-o para o usuário e aplicações.


# O sistema de arquivos no Docker, tem-se a mesma arquitetura, entretanto com alguns
# diferenciais:
# A camada de escrita que o processo/aplicação visualiza, não é o mesmo rootfs base
# do sistema, mas sim uma camada de abstração do rootfs.
# Fazendo com que o container torna-se portatil, pois as modificações realizadas
# não são aplicadas ao sistema de origem do container e sim na camada no qual O
# sistema o visualiza.

# O rootfs é isolado por camadas, onde o que deve ser compartilhado entre o host
# e o container é compartilhado via AUFS (https://en.wikipedia.org/wiki/Aufs), que monta
# uma camada de leitura e escrita em cima do sistema de arquivos que é somente leitura.
# Garantindo assim, que qualquer modificação feita no container, não seja aplicado ou que
# afete o sistema de arquivos do host.

# Observação: A cada modificação, é criado novas camadas. Por isso é considerado um
# Filesystem em Camadas.

## Imagens de Sistemas Operacionais

# Ao utilizar uma image de um sistema operacional, exemplo ubuntu
# Criará um container que conterá as configurações basicas 
# do sistema operacional.

# containers que não sejam de serviço, serão executados e finalizado

## Alpine

# A imagem fica muito mais enxuta, tendo imagens menores e mais faceis de configurar.
# Utiliza como comando principal de instalação o APK, enquanto debiam e ubuntu
# utiliza o apt.

## Acessando portas de Containers

# As portas dos containers não são localizadas atraves do localhost
# sendo necessário o "espelhamento" desta porta localmente.
# Ao iniciarmos o serviço "nginx" através do comando:

docker run -d -e NGINX_ENTRYPOINT_QUITE_LOGS=1 nginx:1.19.4-alpine

# O mesmo poderá ser acessado via porta 80 do docker, porém não acessivel
# via localhost. Desta maneira, é necessário indicar qual porta local
# servirá de acesso a porta do docker. No proximo comando será indicado como
# porta de acesso, a porta de número 8080:

docker run -d -p 8080:80 nginx:1.19.4-alpine

# Desta maneira, o serviço pode ser acessado via url: 
# localhost:8080 ou 0.0.0.0:8080 ou 127.0.0.1:8080 ou ip_maquina:8080

## Persistência de Dados

# Containers não realizam a persistência de dados. Então qualquer edição ou alteração
# de dados realizados dentro de um containers, serão perdidas.
# Para solucionar essa situação, é necessários ter Volumes de Dados.

## Volumes em Container

# Os volumes são expostos do host para o container, e não o contrário.
# Quando o container não está em execução, os dados continuam disponiveis
# quando o mesmo é iniciado novamente.

# Observação: Os arquivos e diretórios expostos estão em sua máquina host e não
# no container. Desta forma, qualquer modificação ou persistência, é realizada 
# no seu computador, e não no container.

# Para criar / executar um container com um volume, basta acrescentar a opção "-v 'caminho/volume'" 
# no comando run.
# Exemplo:

docker run -v "/var/www" --name servidor_web -d -e NGINX_ENTRYPOINT_QUITE_LOGS=1 nginx:1.19.4-alpine

# Quando um container é excluido, o vinculo entre o volume e o docker é quebrado, 
# tendo qualquer persistência perdida. Entretando, se o mesmo for executado, o conteudo continuará
# disponivel para acesso.

# Para não ocorrer a perda do vinculo, é possivel mapear um diretório do host e realizar esse vinculo
# com o container
# em -v, será mapeado primeiro o diretório do host e depois do container -> 
# -v "diretorio/host:diretorio/container"
# onde tudo o que ocorrer no diretorio host, será mapeado no container

docker run -v "/home/us_docker/arquivos_html:/usr/share/nginx/html" --name servidor_web -d -p 8080:80 -e NGINX_ENTRYPOINT_QUITE_LOGS=1 nginx:1.19.4-alpine

# quando acessado o local host, será possivel visualizar o arquivo html localizado em arquivos_html
# como se estivessem no servidor web do nginx no diretorio html.
# Toda edição realizada através do container, será persistida nos arquivos mapeados através do -v
