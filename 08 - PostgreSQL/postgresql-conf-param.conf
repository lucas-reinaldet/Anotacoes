# https://medium.com/@jujulisan/otimize-seu-postgresql-come%C3%A7ando-pelo-come%C3%A7o-c4815b627594

### pg_hba.conf

# Especificar acesso a base de dados para determinado IP
#   local       DB              user            cidr-address            method
    host        all             all             0.0.0.0   md5


### postgresql.conf

# IP's que podem disponibilizar a base de dados
listen_addresses = 'localhost'

# Quantidde maxima de conexões concorrentes
max_connections = 200

# Esse valor é basicamente setado para algoritmos de ordenação complexos, 
# o valor define a quantidade máxima de memória para ser usada em 
# resultados intermediários, hash tables e sorting.
work_mem = 16MB

# Geralmente um valor interessante é por volta de 25% da RAM total do sistema,
# no caso de um servidor dedicado. O valor total da RAM nunca deve ser totalmente
# reservado para shared buffer, pois o próprio Linux reserva uma parte da
# memória para buffer, onde ele armazena as páginas que também poderão ser
# usadas em uma consulta (caso a query não encontre no shared buffer,
# porém tudo que está no shared buffer está nesse cache, só o contrário
# que não é verdadeiro).
shared_buffers = 2048MB

# Write-Ahead Logging (WAL) garante a integridade dos dados, o PostgreSQL
# grava registros no WAL e só depois ele transfere esses registros para o disco.
# É interessante mudar esse valor se a quantidade de conexões concorrentes
# for alta, isso poderá aumentar o desempenho.
# wal_buffers = -1

# Utilizado para especificar a quantidade de memória que será utilizada 
# para rotinas de manutenção: VACUUM(se não houver autovacuum_work_mem configurado),
# CREATE INDEX e ALTER TABLE ADD FOREIGN KEY.
# OBS: o valor de maintenance_work_mem poderá ser multiplado por autovacuum_max_workers
maintenance_work_mem = 512MB

# Define o número de operações de E/S de disco simultâneas que o PostgreSQL
# espera que possam ser executadas simultaneamente. Aumentar esse valor aumentará
# o número de operações de E/S que qualquer sessão individual do PostgreSQL tenta
# iniciar em paralelo. O intervalo permitido é de 1 a 1.000 ou zero para desabilitar
# a emissão de solicitações de E/S assíncronas. Atualmente, essa configuração afeta
# apenas as verificações de heap de bitmap.
effective_io_concurrency = 200

# Define o número máximo de processos em segundo plano que o sistema pode
# suportar. Este parâmetro só pode ser definido na inicialização do servidor.
# O padrão é 8.
max_worker_processes = 10

# Configura o número máximo de trabalhos paralelos que podem
# ser iniciados por um único comando de utilitário. Atualmente,
# os comandos do utilitário paralelo que suportam o uso de trabalhos
# paralelos são CREATE INDEX apenas ao construir um índice de árvore B
# e VACUUM sem FULLopção. trabalhos paralelos são retirados do
# conjunto de processos estabelecido por max_worker_processes, limitado
# por max_parallel_workers . Observe que o número solicitado de
# trabalhos pode não estar disponível em tempo de execução.
# Se isso ocorrer, a operação do utilitário será executada com
# menos trabalhos do que o esperado. O valor padrão é 2. Definir
# esse valor como 0 desativa o uso de trabalhos paralelos pelos
# comandos do utilitário.
max_parallel_maintenance_workers = 4

# define o número máximo de trabalhos que podem ser iniciados por um único
# Gatherou Gather Mergenó. trabalhos paralelos são retirados do conjunto
# de processos estabelecido por max_worker_processes, limitado por
# max_parallel_workers. Observe que o número solicitado de trabalhos
# pode não estar disponível em tempo de execução. Se isso ocorrer, o plano
# será executado com menos trabalhos do que o esperado, o que pode ser
# ineficiente. O valor padrão é 2. Definir esse valor como 0 desabilita a
# execução de consultas paralelas.
max_parallel_workers_per_gather = 4

# Define o número máximo de trabalhos que o sistema pode suportar
# para operações paralelas. O valor padrão é 8. Ao aumentar ou diminuir
# esse valor, considere também ajustar max_parallel_maintenance_workers
# e max_parallel_workers_per_gather . Além disso, observe que uma
# configuração para esse valor maior que max_worker_processes não
# terá efeito, pois os trabalhos paralelos são obtidos do conjunto
# de processos de trabalho estabelecido por essa configuração.
max_parallel_workers = 10

# Tamanho máximo para permitir que o WAL cresça durante os pontos de verificação
# automáticos. Este é um limite suave; O tamanho do WAL pode exceder max_wal_sizeem
# circunstâncias especiais, como carga pesada, um archive_command com falha ou uma
# configuração alta de wal_keep_segments . Se este valor for especificado sem
# unidades, será considerado como megabytes. O padrão é 1 GB. Aumentar esse
# parâmetro pode aumentar o tempo necessário para a recuperação de falhas.
# Este parâmetro só pode ser definido no arquivo postgresql.conf ou na linha
# de comando do servidor.
max_wal_size = 4GB

# Desde que o uso do disco WAL permaneça abaixo dessa configuração, os arquivos
# WAL antigos são sempre reciclados para uso futuro em um ponto de verificação,
# em vez de removidos. Isso pode ser usado para garantir que espaço WAL
# suficiente seja reservado para lidar com picos no uso de WAL, por exemplo,
# ao executar grandes trabalhos em lote. Se este valor for especificado
# sem unidades, será considerado como megabytes. O padrão é 80 MB. Este
# parâmetro só pode ser definido no arquivo postgresql.conf ou na linha
# de comando do servidor.
min_wal_size = 1GB

# Especifica o destino da conclusão do ponto de verificação, como uma fração do
# tempo total entre os pontos de verificação. O padrão é 0.5, que distribui o
# ponto de verificação por quase todo o intervalo disponível, fornecendo uma
# carga de E/S bastante consistente e, ao mesmo tempo, deixando algum tempo
# para sobrecarga de conclusão do ponto de verificação. Reduzir esse parâmetro
# não é recomendado porque faz com que o ponto de verificação seja concluído
# mais rapidamente. Isso resulta em uma taxa mais alta de E/S durante o ponto
# de verificação seguido por um período de menos E/S entre a conclusão do ponto
# de verificação e o próximo ponto de verificação agendado.
checkpoint_completion_target = 0.7

# Basicamente ele fornece uma estimativa de quanto é a memória disponível para
# armazenamento em cache. Esse valor é utilizado pelo query planner para descobrir
# se os planos caberiam ou não na RAM.
# Um valor muito utilizado é metade do tamanho da RAM ou 75% em casos de servidores
# dedicados.
effective_cache_size = 9216MB

# autovacuum_max_workers = 3

# Configura o destino de estatísticas padrão para colunas de tabela sem um
# destino específico de coluna definido por meio de ALTER TABLE SET STATISTICS.
# Valores maiores aumentam o tempo necessário para fazer ANALYZE, mas podem
# melhorar a qualidade das estimativas do planejador. O padrão é 100.
# default_statistics_target = 100

# Define a estimativa do planejador do custo de uma página de disco não buscada 
# sequencialmente. O padrão é 4.0.
# Reduzir esse valor em relação a seq_page_cost fará com que o sistema prefira
# varreduras de índice; aumentá-lo fará com que as varreduras de índice pareçam
# relativamente mais caras. Você pode aumentar ou diminuir os dois valores juntos
# para alterar a importância dos custos de E/S de disco em relação aos custos de
# CPU, que são descritos pelos parâmetros a seguir.
# https://postgresqlco.nf/doc/en/param/random_page_cost/
# random_page_cost = 4.0





























