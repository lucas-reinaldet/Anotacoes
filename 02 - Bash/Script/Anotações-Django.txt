O arquivo ASGI é do Django 3 -> Forma de fazer deproid de forma assincrona (mais v eloz e melhor perfomace)

WSGI -> Serve para deproid e pertence as versoes anteriores

3,0 Tem suporte ao MariaDB

É indicado que a nomenclatura do model seja escrita em inglês

O Django é composto por APP's

###### ###### ###### ######

python manage.py migrate -> criar tabela e popular essas tabelas padroes do python

python manage.py createsuperuser -> criar um super usuario

python manage.py runserver -> acessar a URL -> acrescentar /admin -> acessar pasta de administração do django

Em URls.py será o responsavel por ligar a WEB com a View do sistema

python manage.py startapp nome_app  -> criou uma app

Ao criar uma app deve-se ir em settings.py e acrescentar o nome à variavel installed_apps.

_________________________________________

em models.py do app criado, para criar um modelo da base de dados, é utilizado uma classe que herda de models.Model (from django.db import models)

Exemplo de uma Classe modelo Criada:

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto
    
_________________________________________

Apos criado o model, ao executar o comando

python manage.py makemigrations

é executado uma verificação em todas as apps listadas, e caso algum novo model foi criado, cria um arquivo dentro de migrations para definir como as informações do model serão inseridas na base de dados.

resultado no terminal:

Migrations for 'website':
  website/migrations/0001_initial.py
    - Create model Post

Exemplo de arquivo gerado:

# Generated by Django 3.2.6 on 2021-08-04 19:12

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('sub_title', models.CharField(max_length=200)),
                ('content', models.TextField()),
            ],
        ),
    ]

_________________________________________

O comando a seguir, serve para criar a tabela na base de dados 

python manage.py migrate

_________________________________________

Para interagir com a tabela do banco de dados, é necessário documentar no arquivo admin, para possibilitar que o mesmo seja apresentado no admin do django.

http://127.0.0.1:8000/admin/

No arquivo admin.py do app criado.

devese-se realizar a importação do arquivo Model, e registrar o mesmo.

Exemplo de código:

from django.contrib import admin
from .models import Post

admin.site.register(Post)
_________________________________________

O comando "Include" fornece a capacidade de inserir as URLS de outros APP's

Exemplo: 

from django.contrib import admin
from django.urls import path
from django.urls.conf import include
from .views import hello_world

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', hello_world),
    path('blog/', include('website.urls')),
]

E o arquivo também pode ser criado dentro dessas APPS caso não exista.

Exemplo: 

from django.urls import path
from .views import hello_blog

urlpatterns = [
    path('', hello_blog),

]

E dentro da Views chamada, basta criar uma função que te retorna as informações desejadas para ser apresentado.

É importante mencionar, que é possivel também retornar páginas HTML, criadas dentro do proprio APP.

exemplo:

from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):

    return render(request, 'index.html')
    
Observação:

A pasta Templates [A pasta é criada pelo usuário] (onde se localiza o arquivo html) é automaticamente referenciada dentro do projeto, entretanto é possivel referenciar outros arquivos de outras pastas, sendo necessário acrescentar o caminho da pasta em settings.

Exemplo:

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates_geral'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

Onde a pasta está localizada fora da APP.

Exemplo:

from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):

    return render(request, 'index_geral.html')
    
 _________________________________________
  
 Injetar conteudo dentro do Template
 
 É passado como response do meu render.
 
 Exemplo:
 
 from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):

    data = {'name': 'Curso de Django 3'}

    return render(request, 'index.html', data)
    
Onde, é possivel resgatar o conteudo colocando o nome da key do dicionario entre duas chaves:

{{ name }}

Exemplo de uma lista de nomes:

Arquivo Views.py

from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello_blog(request):
    lista = ['Django', 'Python', 'Git', 'HTML', 'Banco de Dados', 'Linux', 'Nginx', 'Uwsgi']
    data = {'name': 'Curso de Django 3', 'lista_tecnologias': lista}

    return render(request, 'index.html', data)
    

Arquivos. index.html

<h1> BLOG </h1>

{{ name }}

<ul>
{% for item in lista_tecnologias %}

    {% if item == 'Django' %}
        
        <li><b> {{ item }} </b></li> 

    {% else %}

        <li> {{ item }} </li> 

    {% endif %}

{% endfor %}
</ul>

__________________________

Consultar a base de dados

from .models import Post

def funcao_x():

	lista = Post.objects.all()
	
_________________________	

# mais informações https://docs.djangoproject.com/en/3.2/ref/contrib/admin/

Personalizar como é mostrado os objetos no modulo admin

Criar uma classe que herda de admin.ModelAdmin

E cria uma lista dos campos e passa a classe como parametro para o admin.site.register

Exemplo:

from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'sub_title']

admin.site.register(Post, PostAdmin)


Ou até mesmo é possivel ativar o campo de busca, acrescentando apenas a classe mencionada anteriormente o seguinte comando:

search_fields = ['title', 'sub_title']

é possivel também determinar os campos que poderão ser editados e criados, sendo apresentado apenas os campos listados em fields.

fields = ['title', 'sub_title']

_________________________________-

Para alterar a maneira que os objetos são representados na edição de dados já cadastrados, basta criar uma função __str__ na classe do objeto, padraonizando assim a maneira que o dado será apresentado.

Exemplo:

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto

    def __str__(self):

        return self.title

É possivel também, criar novos "campos" de apresentação na listagem de objetos.

Basta criar um metodo (na classe do objeto) retornando a informação desejada, e ai em list_display, setar esse metodo.

Exemplo:

Arquivo models.py

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto

    def __str__(self):

        return self.title

    def full_name(self):
        return self.title + ' ' + self.sub_title

Arquivo admin.py

from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'sub_title', 'full_name']
    search_fields = ['title', 'sub_title']
    fields = ['title', 'sub_title']

admin.site.register(Post, PostAdmin)

Inicialmente, o mesmo não poderá ser ordenado como os outros campos, entretanto, basta colocar o nome do metodo (na classe que se encontra em model.py) seguido de admin_order_fiel e setar qual será o campo usado para ordenar essa coluna.

Exemplo:

from django.db import models

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto

    def __str__(self):

        return self.title

    def full_name(self):
        return self.title + ' ' + self.sub_title

    full_name.admin_order_field = 'title'
    
  ________________________________-
  
Para criar uma lista de categorias, onde determinada sigla signifique um valor (comose criasse uma tabela para armazenar os tipos, siglas e ai associar a uma outra tabela). No Django, é possivel criar uma classe que herda da classe models.TextChoices e ali, em formato de variaveis, definirir as siglas e seus respectivos valores.
  
Desta forma, é cadastro no banco de dados apenas as siglas por exemplo, e quando apresentado ao usuário na tela de admin para o cadastro, o significado da sigla é apresentado.

Exemplo do código:

from django.db import models

class Categorias(models.TextChoices):
    TECH = 'TC', 'Tecnologia'
    CR = 'CR', 'Curiosidades'
    GR = 'GR', 'Geral'

class Post(models.Model):
    title = models.CharField(max_length=100)
    sub_title = models.CharField(max_length=200)
    content = models.TextField() #tamanho em aberto
    categories = models.CharField(max_length=2,
                        choices=Categorias.choices,
                        default=Categorias.GR)
    approved = models.BooleanField(default=True)

    def __str__(self):

        return self.title

    def full_name(self):
        return self.title + ' ' + self.sub_title

    full_name.admin_order_field = 'title'
  
__________________________________________-

Para definir o que é apresentado na lista de objetos do admin, basta criar uma função na classe do objeto a ser criado admin, e definir atraves do campo o que será apresentado.

Exemplo:

from django.contrib import admin
from .models import Post

class PostAdmin(admin.ModelAdmin):
    list_display = ['title', 'sub_title', 'full_name', 'categories']
    search_fields = ['title', 'sub_title']
    # fields = ['title', 'sub_title']

    def get_queryset(self, request):
        return Post.objects.filter(approved=True)

admin.site.register(Post, PostAdmin)
_____________________________________________

Para apresentar o nome da categoria ao invés da sigla, basta utilizar:

get_categories_display

Sendo categories o nome da variavel no model post 
_____________________________________________

Configurando arquivos estaticos

Por convenção, todas as APP's que possuirem este tipo de pasta, deverá ser chamada de "static" caso contrario, deverá ser mapeada em STATIC_URL no arquivo settings.py

Em static, será localizado arquivos que não são dinamicos (avá) e conterá CSS, pictures, etc.

No arquivo html, onde será usado algum desses arquivos, é necessário colocar no começo do arquivo (antes da tag doctype, o seguinte comando:

{% load static %}

E em <head>, o mesmo deve fazer referência ao conteudo da pasta:

Exemplo:

<link rel="stylesheet" href="{% static 'assets/css/main.css' %}" />

Exemplo de Código:

<div class="row">

    {% for post in posts%}

        <article class="col-6 col-12-xsmall work-item">
              <a href="{% static 'images/fulls/01.jpg' %}"  class="image fit thumb"><img src="{% static 'images/thumbs/01.jpg' %}" alt="" /></a>
              <h3>{{ post.title }}</h3>
              <p>{{ post.sub_title }}</p>
        </article>

    {% endfor %}
						
</div>

_________________________________

criar uma url com informações de id ou dados para identificar de onde está vindo a mesma.

No arquivo html que será usado como inicializador da mudança de página, no link de referencia ( href= ).

Exemplo:

{% for post in posts%}
	<ul class="actions">
		<li><a href="{% url 'post_detail' post.id %}"  class="button">Read More</a></li>
	</ul>
{% endfor %}


Vale resaltar, que é necessário atribuir um nome ao "path", sendo a forma de ser encontrado atrvés do arquivo HTML.

Em views do app utilizado, será necessário criar uma função que terá como parametro o request, e a variavel que será passada por parametro.

Exemplo:

def post_detail(request, id):
    post = Post.objects.get(id=id)
    return render(request, 'post_detail.html', {'post': post})
    
Em urls.py do app, será necessário definir um novo path com o primeiro parametro definido como "post" (nome da variavel que é definido no arquivo html, e em os sinais de "<" e ">" identificar o tipo do conteudo e o nome da variavel.

Exemplo:

from django.urls import path
from .views import hello_blog

#importar a função criada
from .views import post_detail

urlpatterns = [
    path('', hello_blog, name='home_blog'),
    
    #identificar os parametros e a função importada 
    # definirir um name
    path('post/<int:id>/', post_detail, name='post_detail'),
]

E no outro arquivo HTML, basta utilizar a variavel passada.

<section id="one">
	<header class="major">
		<h2> {{ post.title}}</h2>
      		<H4> {{ post.sub_title }}</H4>
	</header>
	<p>{{POST.content}}</p>
	
	<ul class="actions">
		<li><a href="{% url 'home_blog' %}"  class="button">Return</a></li>
	</ul>
</section>
	
Para voltar para a página inicial, basta criar um botão com a seguinte refência:

<a href="{% url 'home_blog' %}"  class="button">Return</a>
____________________________________________-

Quando se é referenciado uma pasta dentro de seu arquivo, é importante se atentar ao "path" da pasta ou arquivo, já que quando feito o upload para algum servidor, o mesmo pode mudar, fazendo assim com que ocorra erros de not found.

uma maneira de prevenir este tipo de ocorrencia, é utilizar a biblioteca "os" do Python, onde utiliza a localização do mesmo e agregar a localização do arquivo desejado.

Exemplo:

from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

__________________________________________

Arquivos de midia (manipular)

Aprender a colocar imagem vinculada a determinado componente da página WEB.

Em settings.py, será necessário alterar ou criar duas variaveis:

MEDIA_ROOT = "caminho absoluto dos seus arquivos de midia"

MEDIA_URL = "Caminho para chegar aos caminhos de midia"

Exempĺo:

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

No model, na classe desejada. Deve-se criar uma variavel do tipo "ImageField", onde já possui diversas funcionalidades inseridas.

Exemplo:

image = models.ImageField(upload_to='posts')

sendo "upload_to" a subpasta dentro da pasta definida em "MEDIA_URL" onde será armazenado as imagens. No exemplo em questão a pasta será chamada "posts" e estará localizada em "media"

É importante reforçar que sempre que ocorrer uma mudança em models, deve-se realizar o comando makemigrations

python manage.py makemigration

*********************

Vale ressaltar que caso a mesma base de dados (model ou class) já possua registros, e o campo criado é obrigatório, tem-se duas alternativas.

A primeira é continuar com o processo e atribuir valores zerados ou vazios esses registros.

Ou editar o campo para permitir que receba valores nulos ou padrões.

Exemplo:

image = models.ImageField(upload_to='posts', null=True, blank=True)

ou

approved = models.BooleanField(default=True)

***********************

retornando que foi adicionado o field a classe post

e em seguinda, deve-se executar o comando migrate

python manage.py migrate

onde espelhará o model (estrutura) na base de dados.

Depois de executado todos os passos anteriores, basta acessar o admin do django para realizar o cadastro de um novo post com imagem. 

Apos isso, no HTML, basta referenciar a variavel em uma tag 'img".

Exemplo:

<img src="{{ post.image.url }}">

***********************

"Serving static files during development"

Observação: Inicialmente o servidor do Django, não apresenta imagem, sendo necessário realizar uma gambiarra do proprio framework.

é necessário fazer a importação de settings e static dentro de urls.py (tem que ser na urls.py do projeto):

from django.conf import settings
from django.conf.urls.static import static

e em seguida, apos o colchete de fechamento da "urlpatterns" acrescentar o seguinte comando:

+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

Exemplo:

from django.contrib import admin
from django.urls import path
from django.urls.conf import include
from .views import hello_world
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', hello_world),
    path('blog/', include('website.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

*******************************

Depois de realizado as alterações anteriores, para apresentar o mesmo no arquivo HTML durante o desenvolvimento. Basta utilizar o campo da classe e utilizar o "url" da mesma.

Exemplo:

<img src="{{ post.image.url }}" alt="" />

Um ponto importante para mencionar, é a verificação se o mesmo possui conteudo. Uma maneira de realizar essa verificação é utilizar o "django Language Template", que é uma linguagem propria do django, onde é possivel programar de forma simples a apresentação do conteudo no arquivo HTML.

Essa linguagem já foi apresentada neste arquivo, porém não foi mencionada explicitamente que a mesma pertence ao django.

Um exemplo do código realizado para a apresentação das imagens (quando possui):

{% for post in posts %}

	{% if post.image %}
		<a href="{{ post.image.url }}"  class="image fit thumb">
			<img src="{{ post.image.url }}" alt="" />
5		</a>
	{% else %}
		<a href="{% static 'images/thumbs/01.jpg' %}"  class="image fit thumb">
			<img src="{% static 'images/thumbs/01.jpg' %}" alt="" />
		</a>
	{% endif %}
	
	<article class="col-6 col-12-xsmall work-item">
	
		<h3>{{ post.title }}</h3>
	
		<p>{{ post.sub_title }}</p>
	
		<spam>{{ post.get_categories_display }}</spam>
		
		<ul class="actions">
			<li><a href="{% url 'post_detail' post.id %}"  class="button">Read More</a></li>
		</ul>
		
	</article>
	
{% endfor %}

____________________________________________________________--

Receber informações de página web

Primeiro vamos criar um novo model para receber essas informações:

Exemplo:

class Contact(models.Model):

	name = models.CharField(max_length=150)
	email = models.EmailField()
	message = models.TextField()

Apos realizar alteração no model, deve-se realizar os comandos

python manage.py makemigrations

python manage.py migrate

Agora vamos criar uma rota, para indicar o caminho da web ao django.

Primeiro devemos criar uma nova url em urls.py da APP;

Exemplo:

from django.urls import path
from .views import save_form

urlpatterns = [
    path('save-form/', save_form, name='save_form'),
] 

No HTML, deve-se mencionar em action do formulário, a URL criada em urls.py

Exemplo:

<form method="post" action="{% url 'save_form' %}">

********

Observação:

Ao tentar submeter o formulário, o django irá disparar um warning solicitando a imprementação do CSRF como forma desegurança,pos o Django já possui proteção contra CSRF (Cross-site request forgery
) que é um tipo de ataque hacker.

Para ativar, basta colocar dentro de seu form o seguinte comando:

{% csrf_token %}

**********

Observação:

Ao criar um novo model, é importante mapea-lo no admin.py do app. Pois essa será a unica maneira que o mesmo seja apresentado na pagina de administração do django.

Exemplo:

from django.contrib import admin
from .models import Contact

class PostContact(admin.ModelAdmin):
    list_display = ['name']

admin.site.register(Contact, PostContact)

**************

Lembrando apenas que o admin está mapeado em urls.py do projeto.

Exemplo:

from django.contrib import admin
from django.urls import path
from django.urls.conf import include
from .views import hello_world
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', hello_world),
    path('blog/', include('website.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


********************

Em views.py

Deve-se criar o metodo que irá receber todas as informações do formulário.

Como foi visto na etapa anterior, importamos de ".views" o "save_form", esse metodo receberá as informações do html e dará continuidade no processo de cadastro:

Exemplo:

def save_form(request):

    return render(request, 'contact_success.html')
    
Observação: ao retornar 'contact_success.html', o django retornará para o browser o arquivo html.

Quando submetido o formulário, chegará em seu método um dicionário de dados.

Exempĺo:

<QueryDict: {'csrfmiddlewaretoken': ['c0zjAPuB5DwwfAvKb5k7VUy21oGMLFLcLZSJaOOacIK9oewbSLQhLlAeRBjyCllk'], 'name': ['Nomr'], 'email': ['Email@email.com'], 'message': ['Mensagem sem limite de caracter']}>

Tendo em vista esses dados, para adicionar os dados diretamente em um model e criar o mesmo na base de dados, basta se basear na seguinte estrutura:


Contact.objects.create(
	name = request.POST['name'],
	email = request.POST['email'],
	message = request.POST['message']
)

Tendo como resultado o seguinte método:

def save_form(request):
    nome = request.POST['name']
    Contact.objects.create(
        name = nome,
        email = request.POST['email'],
        message = request.POST['message']
    )

    return render(request, 'contact_success.html', {'name_contact': nome})


***************

Observação:

contact_sucess.html é apenas um arquivo html simples para apresentar uma informação de sucesso.

quando é utilizado o request.POST, isso indica que os dados estão vindo via POST, não estando relacionado a nenhuma nomenclatura de formulário ou metodo.

******************

_______________________________

Para que a URL do blog se torne a URL principal "http://127.0.0.1:8000" ao invés de "http://127.0.0.1:8000/blog/"; basta ir em urls.py do projeto e modificar a url:

path('blog/', include('website.urls')),

para

path('', include('website.urls')),

______________________________



